<!DOCTYPE html>
<html lang="ru-RU">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="description" content=""/>
    <meta name="viewport" content="maximum-scale=1.0" />
    <title> Исполнение нейронной сети, загруженной на бекенд вручную </title>
    <script type="text/javascript" src="../langs.js"></script>
    <script type="text/javascript">
        !function ( w, d ) {
            var scriptsPath="";
            d.writeln("\x3Cscript type='text/javascript' src='"+scriptsPath+d.documentElement.lang+".js'>\x3C/script>");
        }( window, document );
    </script>
    <script type="text/javascript" src="toc.js"></script>
    
    <script type="text/javascript" src="aiconverter_result.js"></script>
    <link rel="stylesheet" type='text/css' href="typography.css"/>
    <link rel="stylesheet" type='text/css' href="styles.css"/>
    <link rel="shortcut icon" href="favicon.ico"/>
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon"/>
    <link rel="icon" href="favicon.png" type="image/png"/>


            <!--[if lte IE 9]>
                <link rel="stylesheet" type="text/css" href="bootstrap.css">
            <![endif]-->
            <!--[if lte IE 8]>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js"></script>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/respond.js/1.4.2/respond.js"></script>
            <![endif]-->
            </head>

<body id="who-content">
	<div class="cont">
	<h2 id="t272357" class="heading2">Исполнение нейронной сети, загруженной на бекенд вручную</h2>
<p class="bodytext">Этот раздел содержит инструкции по созданию нейронной сети, ее загрузке на бекенд и исполнению.</p>
<p class="attentionbody">Вы можете использовать эту инструкцию для разработки прикладных решений.</p>
<p class="procedureheading">Чтобы автоматически загрузить нейронную сеть на бекенд и исполнить ее:</p>
<ol class="listnumber1"><li class="listnumber1">В директории вашего проекта создайте файл программы с расширением .py, в котором будет реализована функция для создания и запуска нейронной сети.</li><li class="listnumber1">В файле программы импортируйте объекты библиотек платформы, необходимые для исполнения нейронной сети.<p class="listcontinue1">Если требуется, определите псевдонимы с помощью оператора <code class="programcharacter">as</code>.</p>
<p class="listcontinue1">Пример подключения объектов библиотек для исполнения нейронной сети с популяцией BLIFAT-нейронов и проекцией дельта-синапсов на однопоточном бекенде для CPU:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">from knp.base_framework._knp_python_framework_base_framework import BackendLoader</p>
<p class="programpythonkos">from knp.core._knp_python_framework_core import UID, BLIFATNeuronPopulation, DeltaSynapseProjection, SpikeMessage</p>
<p class="programpythonkos">from knp.neuron_traits._knp_python_framework_neuron_traits import BLIFATNeuronParameters</p>
<p class="programpythonkos">from knp.synapse_traits._knp_python_framework_synapse_traits import DeltaSynapseParameters, OutputType</p>
</li><li class="listnumber1">Реализуйте генератор нейронов с нужными вам свойствами или используйте готовый генератор из библиотеки фреймворка.<p class="listcontinue1">Пример реализации генератора BLIFAT-нейронов:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos"># Реализована функция, генерирующая BLIFAT-нейроны</p>
<p class="programpythonkos">def neuron_generator(_):  # type: ignore[no-untyped-def]</p>
<p class="programpythonkos">    return BLIFATNeuronParameters()</p>
</li><li class="listnumber1">Реализуйте генератор синапсов с нужными вам свойствами или используйте готовый генератор из библиотеки фреймворка.<p class="listcontinue1">Пример реализации генератора дельта-синапсов:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos"># Реализована функция, генерирующая дельта-синапсы для проекции, которая будет замыкать вывод</p>
<p class="programpythonkos"># популяции на себя </p>
<p class="programpythonkos">def synapse_generator(_):  # type: ignore[no-untyped-def]</p>
<p class="programpythonkos">    return DeltaSynapseParameters(1.0, 6, OutputType.EXCITATORY), 0, 0</p>
<p class="programpythonkos"></p>
<p class="programpythonkos"></p>
<p class="programpythonkos"># Реализована функция, генерирующая дельта-синапсы для проекции, которая будет связана </p>
<p class="programpythonkos"># с каналом ввода</p>
<p class="programpythonkos">def input_projection_gen(_):  # type: ignore[no-untyped-def]</p>
<p class="programpythonkos">    return DeltaSynapseParameters(1.0, 1, OutputType.EXCITATORY), 0, 0</p>
</li><li class="listnumber1">Создайте функцию, в которой будут созданы объекты, необходимые для исполнения нейронной сети.<p class="listcontinue1">Пример создания функции main:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">def main():  # type: ignore[no-untyped-def]</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции создайте объект популяции и передайте в конструктор генератор нейронов.<p class="listcontinue1">Пример создания объекта популяции:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Создает объект популяции с одним BLIFAT-нейроном</p>
<p class="programpythonkos">    population = BLIFATNeuronPopulation(neuron_generator, 1)</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции создайте объект проекции, который будет замыкать вывод популяции на себя. Передайте в конструктор идентификатор связанной популяции и генератор синапсов.<p class="listcontinue1">Пример создания проекции, замыкающей вывод популяции на себя:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Создает объект проекции с одним дельта-синапсом, замыкающей вывод популяции</p>
<p class="programpythonkos">    # на себя</p>
<p class="programpythonkos">    loop_projection = DeltaSynapseProjection(population.uid, population.uid, </p>
<p class="programpythonkos">    synapse_generator, 1)</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции создайте объект входной проекции. Передайте в конструктор генератор синапсов и идентификатор связанной популяции.<p class="listcontinue1">Пример создания входной проекции, связанной с каналом ввода и популяцией:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Создает объект входной проекции с одним дельта-синапсом, которой присваивается</p>
<p class="programpythonkos">    # нулевой идентификатор (UID(False)). Проекция принимает спайки от канала ввода</p>
<p class="programpythonkos">    # и отправляет синаптическое воздействие в объект популяции.</p>
<p class="programpythonkos">    input_projection = DeltaSynapseProjection(UID(False), population.uid, </p>
<p class="programpythonkos">    input_projection_gen, 1)</p>
<p class="programpythonkos"></p>
<p class="programpythonkos">    # Сохраняет UID входной проекции в переменной input_uid</p>
<p class="programpythonkos">    input_uid = input_projection.uid</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции загрузите экземпляр бекенда и загрузите в него созданные популяцию и проекции. Создайте точку подключения.<p class="listcontinue1">Пример загрузки бекенда и создания точки подключения:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Загружает экземпляр однопоточного бекенда для CPU с вашего локального компьютера</p>
<p class="programpythonkos">    backend = BackendLoader().load(f'{pytestconfig.rootdir}/../lib/libknp-cpu-single-</p>
<p class="programpythonkos">    threaded-backend')</p>
<p class="programpythonkos"></p>
<p class="programpythonkos">    # Загружает созданную популяцию в экземпляр бекенда</p>
<p class="programpythonkos">    backend.load_all_populations([population])</p>
<p class="programpythonkos">    # Загружает созданные проекции в экземпляр бекенда</p>
<p class="programpythonkos">    backend.load_all_projections([input_projection, loop_projection])</p>
<p class="programpythonkos"></p>
<p class="programpythonkos">    # Инициализирует бекенд</p>
<p class="programpythonkos">    backend._init()</p>
<p class="programpythonkos">    # Создает объект точки подключения</p>
<p class="programpythonkos">    endpoint = backend.message_bus.create_endpoint()</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции определите идентификаторы каналов ввода и вывода.<p class="listcontinue1">Пример определения идентификаторов каналов ввода и вывода:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Создает произвольные идентификаторы in_channel_uid и out_channel_uid для каналов </p>
<p class="programpythonkos">    # ввода и вывода</p>
<p class="programpythonkos">    in_channel_uid = UID()</p>
<p class="programpythonkos">    out_channel_uid = UID()</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции подпишите бекенд и точку подключения на сообщения от каналов ввода и вывода.<p class="listcontinue1">Пример подписки бекенда и точки подключения на сообщения <code class="programcharacter">SpikeMessage</code>:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ...</p>
<p class="programpythonkos">    # Подписывает бекенд на спайки от канала ввода</p>
<p class="programpythonkos">    backend.subscribe(SpikeMessage, input_uid, [in_channel_uid])</p>
<p class="programpythonkos">    # Подписывает точку подключения на спайки от канала вывода</p>
<p class="programpythonkos">    endpoint.subscribe(SpikeMessage, out_channel_uid, [population.uid])</p>
<p class="programpythonkos">    ...</p>
</li><li class="listnumber1">В созданной функции исполните нейронную сеть. При необходимости создайте список, в который будут записываться индексы шагов, на которых на канал вывода приходят спайки.<p class="listcontinue1">Пример исполнения 20 шагов нейронной сети:</p>
<p class="codeheadingkos">Python</p>
<p class="programpythonkos">    ... </p>
<p class="programpythonkos">    # Создает список results, в который будут записываться индексы шагов со спайками</p>
<p class="programpythonkos">    results = [] </p>
<p class="programpythonkos">    </p>
<p class="programpythonkos">    for step in range(0, 20):</p>
<p class="programpythonkos">        # Посылает спайки на шагах 0, 5, 10 и 15 исполнения нейронной сети</p>
<p class="programpythonkos">        if step % 5 == 0:</p>
<p class="programpythonkos">            # Отображает номер шага, на котором канал ввода отправил спайк входной проекции</p>
<p class="programpythonkos">            print(f'STEP {step}')</p>
<p class="programpythonkos">            message = SpikeMessage((in_channel_uid, step), [0])</p>
<p class="programpythonkos">            endpoint.send_message(message)</p>
<p class="programpythonkos"></p>
<p class="programpythonkos">        backend._step()</p>
<p class="programpythonkos">        messages_count = endpoint.receive_all_messages()</p>
<p class="programpythonkos">        output = endpoint.unload_messages(SpikeMessage, out_channel_uid)</p>
<p class="programpythonkos">        if len(output):</p>
<p class="programpythonkos">            # Отображает номер шага, на котором на канал вывода пришел спайк</p>
<p class="programpythonkos">            print(f'STEP {step}')</p>
<p class="listcontinue1"><a id="h255423" class="expandingblocktemplate" href="javascript:toggleBlock('255423')" target="_self">Шаги исполнения нейронной сети</a></p>
<div id="d255423" class="expandingblock" style="display:none"><p class="bodytext">Исполнение нейронной сети производится циклично. Действия, описанные в цикле, повторяются каждые 5 шагов исполнения сети.</p>
<p class="bodytext">На первом шаге цикла канал ввода посылает спайки входной проекции.</p>
<p class="bodytext">На следующем шаге цикла входная проекция вычисляет синаптические воздействия и отправляет их популяции. После получения синаптического воздействия популяция отправляет спайки каналу вывода и проекции, замыкающей вывод популяции на себя. </p>
<p class="bodytext">Через 6 шагов цикла после получения спайков, отправленных входной проекцией, проекция, замыкающая вывод популяции на себя, вычисляет синаптические воздействия, и передает воздействия популяции. </p>
<p class="bodytext">На рисунке ниже представлена схема исполнения нейронной сети.</p>
<p class="picture"><img id="f266553" src="network_cycle.png" class="linkedpngfiletemplate" alt="" vspace="0" hspace="0" align="bottom" border="0"></p>
<p class="picturename">Схема исполнения нейронной сети</p>
<p class="bodytext">В этом примере нейронная сеть исполняется в рамках цикла со следующими шагами: </p>
<ul class="listbullet1"><li class="listbullet1"><em class="emphasischaracter">Шаг 0</em>. Канал ввода посылает спайки входной проекции. Шаг повторяется каждые 5 шагов цикла исполнения нейронной сети.</li><li class="listbullet1"><em class="emphasischaracter">Шаг 1</em>. Входная проекция вычисляет синаптические воздействия и отправляет их популяции. После получения синаптического воздействия популяция отправляет спайки каналу вывода и проекции, замыкающей вывод популяции на себя. Шаг повторяется каждые 5 шагов исполнения сети. </li><li class="listbullet1"><em class="emphasischaracter">Шаг 7</em>. Проекция, замыкающая вывод популяции на себя, вычисляет синаптические воздействия после получения спайков, отправленных 6 шагов назад, и передает воздействия популяции. Популяция отправляет спайки каналу вывода и проекции, замыкающей вывод популяции на себя. Шаг повторяется каждые 5 шагов исполнения нейронной сети.</li><li class="listbullet1"><em class="emphasischaracter">Шаг 13</em>. Проекция, замыкающая вывод популяции на себя, вычисляет синаптические воздействия после получения спайков, отправленных 6 шагов назад, и передает воздействия популяции. Популяция отправляет спайки каналу вывода и проекции, замыкающей вывод популяции на себя. Шаг повторяется каждые 5 шагов исполнения нейронной сети.</li><li class="listbullet1"><em class="emphasischaracter">Шаг 19</em>. Проекция, замыкающая вывод популяции на себя, вычисляет синаптические воздействия после получения спайков, отправленных на шаге 13, и передает воздействия популяции. Популяция отправляет спайки каналу вывода и проекции, замыкающей вывод популяции на себя. </li></ul><p class="bodytext"></p>
</div></li></ol>


	<a href="#" class="bt-home">В начало</a>
	</div>
</body>

</html>
