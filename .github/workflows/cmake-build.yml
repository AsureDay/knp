name: CMake build

on:
  # For the manual run.
  workflow_dispatch:
  # To run as dependent.
  workflow_call:
  workflow_run:
    workflows: ['Build and push Docker image']
    branches: [master]
    types:
      - completed
  push:
    branches: [ "master" ]
    paths:
      - 'knp/**'
      - '.github/workflows/cmake-build.yml'
      - '!/doc/**'
      - '!/docker/**'
      - '!/tools/**'
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            pre_run_command: 
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            pre_run_command: docker run --rm -v ${{ github.workspace }}:/KNP -w /KNP ${{ vars.DOCKERHUB_LOGIN }}/knp-build-image
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            pre_run_command: docker run --rm -v ${{ github.workspace }}:/KNP -w /KNP ${{ vars.DOCKERHUB_LOGIN }}/knp-build-image
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=build_${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        ${{ matrix.pre_run_comman }} cmake -B ${{ steps.strings.outputs.build-output-dir }}_${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: docker run --rm -v ${{ github.workspace }}:/KNP -w /KNP ${{ vars.DOCKERHUB_LOGIN }}/knp-build-image cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 8
      timeout-minutes: 180

    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: docker run --rm -v ${{ github.workspace }}:/KNP -w /KNP/${{ steps.strings.outputs.build-output-dir }}/knp/tests ${{ vars.DOCKERHUB_LOGIN }}/knp-build-image ctest --build-config ${{ matrix.build_type }} -V
      timeout-minutes: 180

    - name: Create packages
      run: docker run --rm -v ${{ github.workspace }}:/KNP -w /KNP/${{ steps.strings.outputs.build-output-dir }} ${{ vars.DOCKERHUB_LOGIN }}/knp-build-image cpack -G DEB
      timeout-minutes: 180

  publish:
    - name: Create new release
      id: create_release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && ${{ matrix.c_compiler }} == 'gcc'
      uses: juitnow/github-action-create-release@v1
      env:
        # This token is provided by Actions.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        files: |
          ${{ steps.strings.outputs.build-output-dir }}/_packages/*.deb
        body: |
          Release creating added to CI
        draft: false
        prerelease: false

    # - name: Publish package to the PyPI
      # Already on push in the master branch.
      # if: startsWith(github.head_ref, 'master')
    #  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    #  uses: pypa/gh-action-pypi-publish@release/v1
    #  with:
    #    password: ${{ secrets.PYPI_API_TOKEN }}
    #    repository_url: https://upload.pypi.org/legacy/
    #    skip_existing: true
        print_hash: true
